volatile int pixel_buffer; 

//Colors
short int black = 0;
short int green = 0x07E0;
short int red = 0xF800;
short int blue = 0x001F;
short int yellow = 0xFFE0;
short int pink = 0xF81F;
short int turquoise = 0x07FF;
short int orange = 111111110000000;
int left = 1;
int right = 0;
int running = 0;
int notRunning = 1;
int midRun = 2;

//draw each pixel
void draw(int x, int y, short int color){
	
	*(short int *)(pixel_buffer + (y << 10) + (x << 1)) = color;
}

void clear(short int color){
	
	int x;
	int y;
	
	for (x = 0; x < 320; x++){
		for (y = 0; y < 240; y++){

			draw(x, y, color);
		}
	}
			
}

void waitForSync(){

	volatile int * pixel_control_ptr = (int *)0xFF203020;
    volatile int * status =(int *)0xFF20302C;
	
	//write 1 to stop drawing
    *pixel_control_ptr = 1;
	
    while((*status & 0x01) == 1){	
	}
    
    //exit when S is 1
    return;
	
}

void drawBird(int bird_X, int bird_Y, short int background, int direction, int run){
	
	//Bird dimension is (starting at 0) 15 x 31 - 512 total pixels
	//for direction: 1 = left, 0 = right
	//for run: 0 = running, 1 = not running, 2 = midrun 
	
	int N = 512;
	int x, y, color;
	short int plot[16][32];
	short int plotRev[16][32];
	
	//initialize the array
	for(x=0; x<16; x++){
		for(y=0; y<32; y++){
			plot[x][y] = background;
		}
	}
		
	//hardcode for the bird
	
	plot[4][1] = green;
	plot[5][1] = green;
	plot[8][1] = green;
	plot[9][1] = green;
	
	plot[6][2] = green;
	plot[7][2] = green;
	
	plot[6][3] = green;
	plot[7][3] = green;
	
	plot[6][4] = green;
	plot[7][4] = green;
	
	plot[6][5] = green;
	plot[7][5] = green;
	
	plot[5][6] = turquoise;
	plot[6][6] = turquoise;
	plot[7][6] = turquoise;
	plot[8][6] = turquoise;
	
	plot[4][7] = turquoise;
	plot[5][7] = turquoise;
	plot[6][7] = turquoise;
	plot[7][7] = turquoise;
	plot[8][7] = black;
	plot[9][7] = turquoise;
	plot[10][7] = turquoise;
	
	plot[4][8] = turquoise;
	plot[5][8] = turquoise;
	plot[6][8] = turquoise;
	plot[7][8] = turquoise;
	plot[8][8] = black;
	plot[9][8] = turquoise;
	plot[10][8] = turquoise;
	
	plot[4][9] = turquoise;
	plot[5][9] = turquoise;
	plot[6][9] = turquoise;
	plot[7][9] = turquoise;
	plot[8][9] = turquoise;
	plot[9][9] = turquoise;
	plot[10][9] = turquoise;
	plot[11][9] = turquoise;
	plot[12][9] = turquoise;
	
	plot[4][10] = turquoise;
	plot[5][10] = turquoise;
	plot[6][10] = turquoise;
	plot[7][10] = turquoise;
	plot[8][10] = black;
	plot[9][10] = pink;
	plot[10][10] = pink;
	plot[11][10] = pink;
	plot[12][10] = pink;
	plot[13][10] = pink;
	
	plot[5][11] = turquoise;
	plot[6][11] = turquoise;
	plot[7][11] = turquoise;
	plot[8][11] = black;
	plot[9][11] = black;
	plot[10][11] = black;
	plot[11][11] = black;
	plot[12][11] = black;
	plot[13][11] = black;
	plot[6][12] = turquoise;
	plot[7][12] = turquoise;
	plot[8][12] = pink;
	plot[9][12] = pink;
	plot[10][12] = pink;
	plot[11][12] = pink;
	plot[12][12] = pink;
	plot[13][12] = pink;
	
	plot[1][13] = orange;
	plot[2][13] = orange;
	plot[3][13] = orange;
	plot[6][13] = orange;
	plot[7][13] = orange;
	
	plot[2][14] = orange;
	plot[3][14] = orange;
	plot[4][14] = orange;
	plot[6][14] = orange;
	plot[7][14] = orange;
	plot[8][14] = orange;
	
	plot[0][15] = orange;
	plot[3][15] = orange;
	plot[4][15] = orange;
	plot[6][15] = orange;
	plot[7][15] = orange;
	plot[8][15] = orange;
	
	plot[0][16] = orange;
	plot[1][16] = orange;
	plot[4][16] = orange;
	plot[7][16] = orange;
	plot[8][16] = orange;
	
	for (x=4; x <11; x++){
		for(y=17; y<25; y++){
			
			plot[x][y] = orange;
			
		}
	}
		
	plot[1][17] = orange;
	plot[2][17] = orange;
	
	plot[2][18] = orange;
	plot[3][18] = orange;
	plot[11][18] = orange;
	
	plot[0][19] = orange;
	plot[1][19] = orange;
	plot[6][19] = black;
	plot[7][19] = black;
	plot[11][19] = orange;
	plot[12][19] = orange;
	
	plot[1][20] = orange;
	plot[2][20] = orange;
	plot[3][20] = orange;
	plot[7][20] = black;
	plot[8][20] = black;
	plot[11][20] = orange;
	plot[12][20] = orange;
	
	plot[6][21] = black;
	plot[8][21] = black;
	plot[9][21] = black;
	plot[11][21] = orange;
	plot[12][21] = orange;
	
	plot[7][22] = black;
	plot[1][22] = orange;
	plot[2][22] = orange;
	plot[11][22] = orange;
	plot[12][22] = orange;
	
	plot[0][23] = orange;
	plot[1][23] = orange;
	plot[2][23] = orange;
	plot[3][23] = orange;
	plot[11][23] = orange;
	plot[12][23] = orange;
	
	plot[1][24] = orange;
	plot[2][24] = orange;
	plot[11][24] = orange;
	
	
	
	
	for(x=5; x<11; x++){
			plot[x][25] = orange;
		}
	
	//for run: 0 = running, 1 = not running, 2 = midrun 
	
	if(run == 0){
		
		for (x=9; x <11; x++){
			for(y=26; y<31; y++){

				plot[x][y] = yellow;

			}
		}
		
		
		for (x=5; x <7; x++){
			for(y=26; y<31; y++){

				plot[x][y] = yellow;

			}
		}
		
		plot[2][0] = green;
		plot[3][0] = green;
		plot[10][0] = green;
		plot[11][0] = green;
		
		plot[4][29] = yellow;
		plot[11][29] = yellow;
		plot[12][29] = yellow;
		
		plot[3][30] = yellow;
		plot[4][30] = yellow;
		plot[9][30] = black;
		plot[11][30] = yellow;
		plot[12][30] = yellow;
		plot[13][30] = yellow;
		
		plot[11][31] = yellow;
		plot[12][31] = yellow;
		
	} else if (run == 1){
		
		for (x=9; x <11; x++){
			for(y=26; y<31; y++){

				plot[x][y] = yellow;

			}
		}
		
		plot[2][2] = green;
		plot[3][2] = green;
		plot[10][2] = green;
		plot[11][2] = green;
		
		plot[5][26] = yellow;
		plot[6][26] = yellow;
		
		plot[6][27] = yellow;
		
		plot[6][28] = yellow;
		plot[7][28] = yellow;
		
		plot[4][29] = yellow;
		plot[5][29] = yellow;
		plot[6][29] = yellow;
		plot[7][29] = yellow;
		plot[11][29] = yellow;
		
		plot[11][30] = yellow;
		plot[12][30] = yellow;
		
	} else if(run == 2){
			
		plot[2][2] = green;
		plot[3][2] = green;
		plot[10][2] = green;
		plot[11][2] = green;
		
		plot[5][26] = yellow;
		plot[6][26] = yellow;
		plot[9][26] = yellow;
		
		plot[6][27] = yellow;
		plot[9][27] = yellow;
		plot[10][27] = yellow;
		plot[11][27] = yellow;
		
		plot[6][28] = yellow;
		plot[7][28] = yellow;
		plot[10][28] = yellow;
		plot[11][28] = yellow;
		
		plot[7][29] = yellow;
		plot[11][29] = yellow;
		
		plot[7][30] = yellow;
		plot[8][30] = yellow;
		plot[9][30] = yellow;
		
	}
	
	
	
	
	//create the reversed image
	for(x=0; x<16; x++){
		for(y=0; y<32; y++){
			
			int a = x - 15;
			
			if(a < 0){
				a = -a;
			}
					
			plotRev[a][y] = plot[x][y];
		}
	}
	
	//print
	for(x=0; x<16; x++){
		for(y=0; y<32; y++){
			
			if (direction == 0){
				draw(bird_X + x, bird_Y + y, plot[x][y]);
			} else if (direction == 1){
				draw(bird_X + x, bird_Y + y, plotRev[x][y]);	
			}
		}
	}
	
}
	
int main(void){
	
	volatile int * pixel_control_ptr = (int *)0xFF203020;
    pixel_buffer = *pixel_control_ptr;
	
	int xPos = 1;
	int yPos = 100;
	int runType;
	int direction;
	int increment;
	
	clear(black);
	
	runType = midRun;
	direction = right;
	increment = 15;
	
	while(1){
		waitForSync();
		waitForSync();
		clear(black);
		drawBird(xPos, yPos, black, direction, runType);

		if(runType == midRun){
			runType = running;
			yPos = 103;
		} else if (runType == running){
			runType = notRunning;
			yPos = 100;
		} else if (runType == notRunning){
			runType = midRun;
			yPos = 100;
		}
			
		xPos = xPos + increment;
		
		if(xPos + 16 >= 300){
			direction = left;
			increment = -increment;
		}
		
		if(xPos <= 0){
			direction = right;
			increment = -increment;
		}
		
	}
	
	//drawBird(100, 100, blue, right, running);
	//drawBird(200, 100, blue, right, notRunning);
	//drawBird(300, 100, blue, right, midRun);
	
	return 0;
}