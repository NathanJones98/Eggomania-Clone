volatile int pixel_buffer_start; 

//Colors
short int black = 0;
short int green = 0x07E0;
short int red = 0xF800;
short int blue = 0x001F;
short int yellow = 0xFFE0;
short int pink = 0xF81F;
short int turquoise = 0x07FF;
short int orange = 111111110000000;
short int white = 65535;

int left = 1;
int right = 0;
int running = 0;
int notRunning = 1;
int midRun = 2;

//draw each pixel
void draw(int x, int y, short int color){
	if(x < 320 && y<240){
		*(short int *)(pixel_buffer_start + (y << 10) + (x << 1)) = color;
	}
}

void clear(short int color){
	
	int x;
	int y;
	
	for (x = 0; x < 320; x++){
		for (y = 0; y < 240; y++){

			draw(x, y, color);
		}
	}
			
}

void waitForSync(){
	volatile int * pixel_ctrl_ptr = (int *)0xFF203020;
	int status;
	//make the request for the swap
	*(pixel_ctrl_ptr)=1; //writes 1 to the front buffer register, doesn't change it, is a signal
	status = *(pixel_ctrl_ptr+3); //as above, pointer arithmetic says 3 -> plus 3 words, 12 bytes
	while((status&0x01)!=0){ //polling loop in C!
		status=*(pixel_ctrl_ptr+3); 
	}
}

void drawBird(int bird_X, int bird_Y, short int background, int direction, int run){
	
	//Bird dimension is (starting at 0) 15 x 31 - 512 total pixels
	//for direction: 1 = left, 0 = right
	//for run: 0 = running, 1 = not running, 2 = midrun 
	
	int N = 512;
	int x, y, color;
	short int plot[16][32];
	short int plotRev[16][32];
	
	//initialize the array
	for(x=0; x<16; x++){
		for(y=0; y<32; y++){
			plot[x][y] = background;
		}
	}
		
	//hardcode for the bird
	
	plot[4][1] = green;
	plot[5][1] = green;
	plot[8][1] = green;
	plot[9][1] = green;
	
	plot[6][2] = green;
	plot[7][2] = green;
	
	plot[6][3] = green;
	plot[7][3] = green;
	
	plot[6][4] = green;
	plot[7][4] = green;
	
	plot[6][5] = green;
	plot[7][5] = green;
	
	plot[5][6] = turquoise;
	plot[6][6] = turquoise;
	plot[7][6] = turquoise;
	plot[8][6] = turquoise;
	
	plot[4][7] = turquoise;
	plot[5][7] = turquoise;
	plot[6][7] = turquoise;
	plot[7][7] = turquoise;
	plot[8][7] = black;
	plot[9][7] = turquoise;
	plot[10][7] = turquoise;
	
	plot[4][8] = turquoise;
	plot[5][8] = turquoise;
	plot[6][8] = turquoise;
	plot[7][8] = turquoise;
	plot[8][8] = black;
	plot[9][8] = turquoise;
	plot[10][8] = turquoise;
	
	plot[4][9] = turquoise;
	plot[5][9] = turquoise;
	plot[6][9] = turquoise;
	plot[7][9] = turquoise;
	plot[8][9] = turquoise;
	plot[9][9] = turquoise;
	plot[10][9] = turquoise;
	plot[11][9] = turquoise;
	plot[12][9] = turquoise;
	
	plot[4][10] = turquoise;
	plot[5][10] = turquoise;
	plot[6][10] = turquoise;
	plot[7][10] = turquoise;
	plot[8][10] = black;
	plot[9][10] = pink;
	plot[10][10] = pink;
	plot[11][10] = pink;
	plot[12][10] = pink;
	plot[13][10] = pink;
	
	plot[5][11] = turquoise;
	plot[6][11] = turquoise;
	plot[7][11] = turquoise;
	plot[8][11] = black;
	plot[9][11] = black;
	plot[10][11] = black;
	plot[11][11] = black;
	plot[12][11] = black;
	plot[13][11] = black;
	plot[6][12] = turquoise;
	plot[7][12] = turquoise;
	plot[8][12] = pink;
	plot[9][12] = pink;
	plot[10][12] = pink;
	plot[11][12] = pink;
	plot[12][12] = pink;
	plot[13][12] = pink;
	
	plot[1][13] = orange;
	plot[2][13] = orange;
	plot[3][13] = orange;
	plot[6][13] = orange;
	plot[7][13] = orange;
	
	plot[2][14] = orange;
	plot[3][14] = orange;
	plot[4][14] = orange;
	plot[6][14] = orange;
	plot[7][14] = orange;
	plot[8][14] = orange;
	
	plot[0][15] = orange;
	plot[3][15] = orange;
	plot[4][15] = orange;
	plot[6][15] = orange;
	plot[7][15] = orange;
	plot[8][15] = orange;
	
	plot[0][16] = orange;
	plot[1][16] = orange;
	plot[4][16] = orange;
	plot[7][16] = orange;
	plot[8][16] = orange;
	
	for (x=4; x <11; x++){
		for(y=17; y<25; y++){
			
			plot[x][y] = orange;
			
		}
	}
		
	plot[1][17] = orange;
	plot[2][17] = orange;
	
	plot[2][18] = orange;
	plot[3][18] = orange;
	plot[11][18] = orange;
	
	plot[0][19] = orange;
	plot[1][19] = orange;
	plot[6][19] = black;
	plot[7][19] = black;
	plot[11][19] = orange;
	plot[12][19] = orange;
	
	plot[1][20] = orange;
	plot[2][20] = orange;
	plot[3][20] = orange;
	plot[7][20] = black;
	plot[8][20] = black;
	plot[11][20] = orange;
	plot[12][20] = orange;
	
	plot[6][21] = black;
	plot[8][21] = black;
	plot[9][21] = black;
	plot[11][21] = orange;
	plot[12][21] = orange;
	
	plot[7][22] = black;
	plot[1][22] = orange;
	plot[2][22] = orange;
	plot[11][22] = orange;
	plot[12][22] = orange;
	
	plot[0][23] = orange;
	plot[1][23] = orange;
	plot[2][23] = orange;
	plot[3][23] = orange;
	plot[11][23] = orange;
	plot[12][23] = orange;
	
	plot[1][24] = orange;
	plot[2][24] = orange;
	plot[11][24] = orange;
	
	
	
	
	for(x=5; x<11; x++){
			plot[x][25] = orange;
		}
	
	//for run: 0 = running, 1 = not running, 2 = midrun 
	
	if(run == 0){
		
		for (x=9; x <11; x++){
			for(y=26; y<31; y++){

				plot[x][y] = yellow;

			}
		}
		
		
		for (x=5; x <7; x++){
			for(y=26; y<31; y++){

				plot[x][y] = yellow;

			}
		}
		
		plot[2][0] = green;
		plot[3][0] = green;
		plot[10][0] = green;
		plot[11][0] = green;
		
		plot[4][29] = yellow;
		plot[11][29] = yellow;
		plot[12][29] = yellow;
		
		plot[3][30] = yellow;
		plot[4][30] = yellow;
		plot[9][30] = black;
		plot[11][30] = yellow;
		plot[12][30] = yellow;
		plot[13][30] = yellow;
		
		plot[11][31] = yellow;
		plot[12][31] = yellow;
		
	} else if (run == 1){
		
		for (x=9; x <11; x++){
			for(y=26; y<31; y++){

				plot[x][y] = yellow;

			}
		}
		
		plot[2][2] = green;
		plot[3][2] = green;
		plot[10][2] = green;
		plot[11][2] = green;
		
		plot[5][26] = yellow;
		plot[6][26] = yellow;
		
		plot[6][27] = yellow;
		
		plot[6][28] = yellow;
		plot[7][28] = yellow;
		
		plot[4][29] = yellow;
		plot[5][29] = yellow;
		plot[6][29] = yellow;
		plot[7][29] = yellow;
		plot[11][29] = yellow;
		
		plot[11][30] = yellow;
		plot[12][30] = yellow;
		
	} else if(run == 2){
			
		plot[2][2] = green;
		plot[3][2] = green;
		plot[10][2] = green;
		plot[11][2] = green;
		
		plot[5][26] = yellow;
		plot[6][26] = yellow;
		plot[9][26] = yellow;
		
		plot[6][27] = yellow;
		plot[9][27] = yellow;
		plot[10][27] = yellow;
		plot[11][27] = yellow;
		
		plot[6][28] = yellow;
		plot[7][28] = yellow;
		plot[10][28] = yellow;
		plot[11][28] = yellow;
		
		plot[7][29] = yellow;
		plot[11][29] = yellow;
		
		plot[7][30] = yellow;
		plot[8][30] = yellow;
		plot[9][30] = yellow;
		
	}
	
	
	
	
	//create the reversed image
	for(x=0; x<16; x++){
		for(y=0; y<32; y++){
			
			int a = x - 15;
			
			if(a < 0){
				a = -a;
			}
					
			plotRev[a][y] = plot[x][y];
		}
	}
	
	//print
	for(x=0; x<16; x++){
		for(y=0; y<32; y++){
			
			if (direction == 0){
				draw(bird_X + x, bird_Y + y, plot[x][y]);
			} else if (direction == 1){
				draw(bird_X + x, bird_Y + y, plotRev[x][y]);	
			}
		}
	}
	
}

void drawDog(int dog_X, int dog_Y, short int background, int direction){
	
	//Dog dimensions are (starting at 0) 17x25 - total of 450 pixels
	
	int N = 512;
	int x, y, color;
	short int plot[18][26];
	short int plotRev[18][26];
	
	//initialize the array
	for(x=0; x<18; x++){
		for(y=0; y<26; y++){
			plot[x][y] = background;
		}
	}
	
	//HardCode the dog
	plot[7][1] = orange;
	plot[8][1] = orange;
	plot[14][1] = orange;
	
	plot[7][2] = pink;
	plot[8][2] = pink;
	plot[14][2] = pink;
	
	plot[6][3] = orange;
	plot[7][3] = pink;
	plot[8][3] = pink;
	plot[9][3] = orange;
	plot[13][3] = orange;
	plot[14][3] = pink;
	
	plot[6][4] = orange;
	plot[7][4] = pink;
	plot[8][4] = pink;
	plot[9][4] = orange;
	plot[10][4] = orange;
	plot[11][4] = orange;
	plot[12][4] = orange;
	plot[13][4] = orange;
	plot[14][4] = orange;
	
	plot[6][5] = orange;
	plot[7][5] = orange;
	plot[8][5] = orange;
	plot[9][5] = orange;
	plot[10][5] = orange;
	plot[11][5] = orange;
	plot[12][5] = orange;
	plot[13][5] = orange;
	plot[14][5] = orange;
	plot[15][5] = orange;
	
	plot[6][6] = orange;
	plot[7][6] = orange;
	plot[8][6] = orange;
	plot[9][6] = orange;
	plot[10][6] = white;
	plot[11][6] = white;
	plot[12][6] = orange;
	plot[13][6] = white;
	plot[14][6] = orange;
	plot[15][6] = orange;
	
	plot[5][7] = orange;
	plot[6][7] = orange;
	plot[7][7] = white;
	plot[8][7] = white;
	plot[9][7] = orange;
	plot[10][7] = white;
	plot[11][7] = white;
	plot[12][7] = orange;
	plot[13][7] = white;
	plot[14][7] = orange;
	plot[15][7] = orange;
	
	plot[5][8] = orange;
	plot[6][8] = orange;
	plot[7][8] = white;
	plot[8][8] = black;
	plot[9][8] = black;
	plot[10][8] = orange;
	plot[11][8] = orange;
	plot[12][8] = orange;
	plot[13][8] = orange;
	plot[14][8] = black;
	plot[15][8] = orange;
	plot[16][8] = orange;
	
	plot[4][9] = orange;
	plot[5][9] = orange;
	plot[6][9] = white;
	plot[7][9] = white;
	plot[8][9] = black;
	plot[9][9] = black;
	plot[10][9] = orange;
	plot[11][9] = orange;
	plot[12][9] = orange;
	plot[13][9] = white;
	plot[14][9] = black;
	plot[15][9] = white;
	plot[16][9] = white;
	
	plot[4][10] = orange;
	plot[5][10] = orange;
	plot[6][10] = white;
	plot[7][10] = white;
	plot[8][10] = white;
	plot[9][10] = white;
	plot[10][10] = white;
	plot[11][10] = orange;
	plot[12][10] = orange;
	plot[13][10] = white;
	plot[14][10] = white;
	plot[15][10] = white;
	plot[16][10] = white;
	
	plot[4][11] = orange;
	plot[5][11] = white;
	plot[6][11] = white;
	plot[7][11] = white;
	plot[8][11] = white;
	plot[9][11] = white;
	plot[10][11] = white;
	plot[11][11] = black;
	plot[12][11] = black;
	plot[13][11] = black;
	plot[14][11] = white;
	plot[15][11] = white;
	plot[16][11] = white;
	plot[17][11] = white;
	
	plot[1][12] = white;
	plot[2][12] = white;
	plot[4][12] = black;
	plot[5][12] = white;
	plot[6][12] = white;
	plot[7][12] = white;
	plot[8][12] = white;
	plot[9][12] = black;
	plot[10][12] = white;
	plot[11][12] = white;
	plot[12][12] = black;
	plot[13][12] = white;
	plot[14][12] = white;
	plot[15][12] = black;
	plot[16][12] = white;
	plot[17][12] = white;
	
	plot[0][13] = orange;
	plot[1][13] = orange;
	plot[2][13] = orange;
	plot[4][13] = orange;
	plot[5][13] = white;
	plot[6][13] = white;
	plot[7][13] = white;
	plot[8][13] = white;
	plot[9][13] = black;
	plot[10][13] = black;
	plot[11][13] = black;
	plot[12][13] = black;
	plot[13][13] = black;
	plot[14][13] = black;
	plot[15][13] = black;
	plot[16][13] = white;
	plot[17][13] = white;
	
	plot[0][14] = orange;
	plot[1][14] = orange;
	plot[2][14] = orange;
	plot[4][14] = orange;
	plot[5][14] = white;
	plot[6][14] = white;
	plot[7][14] = white;
	plot[8][14] = white;
	plot[9][14] = white;
	plot[10][14] = black;
	plot[11][14] = red;
	plot[12][14] = red;
	plot[13][14] = red;
	plot[14][14] = black;
	plot[15][14] = white;
	plot[16][14] = white;
	plot[17][14] = white;
	
	plot[0][15] = orange;
	plot[1][15] = orange;
	plot[2][15] = orange;
	plot[3][15] = black;
	plot[4][15] = orange;
	plot[5][15] = white;
	plot[6][15] = white;
	plot[7][15] = white;
	plot[8][15] = white;
	plot[9][15] = white;
	plot[10][15] = black;
	plot[11][15] = red;
	plot[12][15] = red;
	plot[13][15] = red;
	plot[14][15] = black;
	plot[15][15] = white;
	plot[16][15] = white;
	plot[17][15] = white;
	
	plot[0][16] = orange;
	plot[1][16] = orange;
	plot[2][16] = black;
	plot[3][16] = orange;
	plot[4][16] = orange;
	plot[5][16] = orange;
	plot[6][16] = white;
	plot[7][16] = white;
	plot[8][16] = white;
	plot[9][16] = white;
	plot[10][16] = black;
	plot[11][16] = red;
	plot[12][16] = red;
	plot[13][16] = red;
	plot[14][16] = black;
	plot[15][16] = white;
	plot[16][16] = white;
	
	plot[1][17] = black;
	plot[2][17] = orange;
	plot[3][17] = orange;
	plot[4][17] = orange;
	plot[5][17] = orange;
	plot[6][17] = orange;
	plot[7][17] = white;
	plot[8][17] = white;
	plot[9][17] = white;
	plot[10][17] = white;
	plot[11][17] = black;
	plot[12][17] = black;
	plot[13][17] = black;
	plot[14][17] = white;
	plot[15][17] = white;
	
	plot[2][18] = orange;
	plot[3][18] = orange;
	plot[4][18] = orange;
	plot[5][18] = orange;
	plot[6][18] = orange;
	plot[7][18] = white;
	plot[8][18] = white;
	plot[9][18] = white;
	plot[10][18] = white;
	plot[11][18] = white;
	plot[12][18] = white;
	plot[13][18] = white;
	plot[14][18] = white;
	
	plot[2][19] = orange;
	plot[3][19] = orange;
	plot[4][19] = orange;
	plot[5][19] = orange;
	plot[6][19] = orange;
	plot[7][19] = orange;
	plot[8][19] = white;
	plot[9][19] = white;
	plot[10][19] = white;
	plot[11][19] = white;
	plot[12][19] = white;
	plot[13][19] = white;
	plot[14][19] = white;
	
	plot[2][20] = orange;
	plot[3][20] = orange;
	plot[4][20] = orange;
	plot[5][20] = orange;
	plot[6][20] = orange;
	plot[7][20] = orange;
	plot[8][20] = orange;
	plot[9][20] = white;
	plot[10][20] = white;
	plot[11][20] = white;
	plot[12][20] = white;
	plot[13][20] = white;
	plot[14][20] = orange;
	
	plot[2][21] = orange;
	plot[3][21] = orange;
	plot[4][21] = orange;
	plot[5][21] = orange;
	plot[6][21] = orange;
	plot[7][21] = orange;
	plot[8][21] = orange;
	plot[9][21] = white;
	plot[10][21] = white;
	plot[11][21] = white;
	plot[12][21] = white;
	plot[13][21] = white;
	plot[14][21] = orange;
	
	plot[2][22] = orange;
	plot[3][22] = orange;
	plot[4][22] = orange;
	plot[5][22] = black;
	plot[6][22] = black;
	plot[7][22] = orange;
	plot[8][22] = orange;
	plot[9][22] = orange;
	plot[10][22] = white;
	plot[11][22] = white;
	plot[12][22] = white;
	plot[13][22] = orange;
	plot[14][22] = orange;
	
	plot[2][23] = orange;
	plot[3][23] = orange;
	plot[5][23] = orange;
	plot[6][23] = orange;
	plot[9][23] = orange;
	plot[10][23] = orange;
	plot[11][23] = white;
	plot[12][23] = white;
	plot[13][23] = orange;
	plot[14][23] = orange;
	
	plot[2][24] = orange;
	plot[3][24] = orange;
	plot[5][24] = orange;
	plot[6][24] = orange;
	plot[9][24] = orange;
	plot[10][24] = orange;
	plot[11][24] = white;
	plot[12][24] = orange;
	plot[13][24] = orange;
	
	plot[2][25] = orange;
	plot[5][25] = orange;
	plot[10][25] = orange;
	plot[13][25] = orange;
	
	//create the reversed image
	for(x=0; x<18; x++){
		for(y=0; y<26; y++){
			
			int a = x - 17;
			
			if(a < 0){
				a = -a;
			}
					
			plotRev[a][y] = plot[x][y];
		}
	}
	
	//print
	for(x=0; x<18; x++){
		for(y=0; y<26; y++){
			
			if (direction == 0){
				draw(dog_X + x, dog_Y + y, plot[x][y]);
			} else if (direction == 1){
				draw(dog_X + x, dog_Y + y, plotRev[x][y]);	
			}
		}
	}
	
	
}

void drawGameLine(){
	
	int x, y;
	
	for (x = 0; x < 320; x++){
		for (y = 50; y < 60; y++){

			draw(x, y, red);
		}
	}
	
}

void drawBucket(int xPos, int yPos){
	
	int x, y;
	
	for(x = 0; x<18; x++){
		for(y = 3; y<5; y++){
			
			draw(x + xPos, y + yPos, blue);
		}
	}
	
	for(y=0; y<5; y++){
		
		draw(xPos, y + yPos, blue);
	}
	
	for(y=0; y<5; y++){
		
		draw(xPos + 17, y + yPos, blue);
	}
	
}

void drawEgg(int xPos, int yPos, short int color){
	
	int x, y;
	
	for(x = 2; x<5; x++){
		for(y = 1; y<9; y++){
			
			draw(x + xPos, y + yPos, color);
		}
	}
	
	for(y=2; y<8; y++){
		
		draw(xPos+1, y + yPos, color);
	}
	
	for(y=2; y<8; y++){
		
		draw(xPos + 5, y + yPos, color);
	}
	
}

int main(void){
	volatile int * pixel_ctrl_ptr = (int *)0xFF203020;
	*(pixel_ctrl_ptr + 1) = 0xC8000000;
	waitForSync();
	
	pixel_buffer_start = *pixel_ctrl_ptr;
    clear(black); // pixel_buffer_start points to the pixel buffer
	
	*(pixel_ctrl_ptr + 1) = 0xC0000000;
	pixel_buffer_start = *(pixel_ctrl_ptr + 1);
	clear(black);
	
	//Define game starting parameters
	int xPos_Bird = 1;
	int xPos_Dog = 200;
	int yPos_Bird = 15;
	int runType = midRun;
	int direction_Bird = right;
	int direction_Dog = right;
	int increment_Bird = 15;
	int increment_Dog = 15;
	int randomNum, i, j, k, l;
	int resetEggs = 0;
	int numOfEggs = 0;
	int xPos_Egg[12];
	int yPos_Egg[12];
	
	k = 0;
	
	while(1){
		
		//
		//waitForSync();
		
		clear(black);
		drawGameLine();
		
		drawBird(xPos_Bird, yPos_Bird, black, direction_Bird, runType);
		drawBucket(xPos_Dog, 214-5);
		drawDog(xPos_Dog, 214, black, direction_Dog);
		
		//Bird Control/////////////////////////////////////////////////////////////////////////////////////////////
		if(runType == midRun){
			runType = running;
			yPos_Bird = 18;
		} else if (runType == running){
			runType = notRunning;
			yPos_Bird = 15;
		} else if (runType == notRunning){
			runType = midRun;
			yPos_Bird = 15;
		}
			
		//Random movements
		randomNum =  rand() %1000;
		
		if(randomNum % 2 == 0){
			direction_Bird = left;
			
			if(increment_Bird > 0){
				increment_Bird = -increment_Bird;
			}
			
		} else if(randomNum % 2 != 0){
			direction_Bird = right;
			
			if(increment_Bird < 0){
				increment_Bird = -increment_Bird;
			}
		}
		
		if(numOfEggs < 10 && randomNum < 500){
			xPos_Egg[numOfEggs] = xPos_Bird;
			yPos_Egg[numOfEggs] = yPos_Bird + 40;
			numOfEggs++;
		}
		
		for(i = k; i < numOfEggs; i++){
			
			if((yPos_Egg[i] + 10) <= 239){
				drawEgg(xPos_Egg[i], yPos_Egg[i], white);
				yPos_Egg[i] = yPos_Egg[i] + 9;
			} else if ((yPos_Egg[i] + 10) >= 239) {
				resetEggs = 1;
				k = i;
			}
		}
		
		if(resetEggs == 1){
			for(j = k; j < numOfEggs; j++){
				if(j != numOfEggs - 1){
					xPos_Egg[j] = xPos_Egg[j + 1];		
					yPos_Egg[j] = yPos_Egg[j + 1];	
				}
			}
			numOfEggs--;
			resetEggs = 0;
		}
		
		//Boundry checks
		if(xPos_Bird + 16 >= 305){
			direction_Bird = left;
			increment_Bird = -increment_Bird;
			xPos_Bird = 100;
			
		}
		
		if(xPos_Bird <= 0){
			direction_Bird = right;
			increment_Bird = -increment_Bird;
			xPos_Bird = 100;
		}
		
		xPos_Bird = xPos_Bird + increment_Bird;
		
		//Egg Control//////////////////////////////////////////////////////////////////////////////////////////////////////
		
		xPos_Dog = xPos_Dog + increment_Dog;
		
		if(xPos_Dog + 16 >= 300){
			direction_Dog = left;
			increment_Dog = -increment_Dog;
		}
		
		if(xPos_Dog <= 0){
			direction_Dog = right;
			increment_Dog = -increment_Dog;
		}
		
		waitForSync(); // swap front and back buffers on VGA vertical sync
        pixel_buffer_start = *(pixel_ctrl_ptr + 1); // new back buffer
		
	}
	
	//drawBird(100, 100, blue, right, running);
	//drawBird(200, 100, blue, right, notRunning);
	//drawBird(300, 100, blue, right, midRun);
	
	return 0;
}
